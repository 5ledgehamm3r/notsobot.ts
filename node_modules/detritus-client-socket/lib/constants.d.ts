export declare const Package: Readonly<{
    URL: string;
    VERSION: string;
}>;
export declare const ApiVersions: Readonly<{
    GATEWAY: number;
    MEDIA_GATEWAY: number;
}>;
export declare const CompressTypes: Readonly<{
    NONE: string;
    PAYLOAD: string;
    ZLIB: string;
    ZSTD: string;
}>;
export declare const DEFAULT_SHARD_COUNT = 1;
export declare const DEFAULT_SHARD_LAUNCH_DELAY = 5000;
export declare const DEFAULT_VOICE_TIMEOUT = 30000;
export declare const EncodingTypes: Readonly<{
    ETF: string;
    JSON: string;
}>;
export declare const GatewayActivityActionTypes: Readonly<{
    JOIN: number;
    SPECTATE: number;
    LISTEN: number;
    WATCH: number;
    JOIN_REQUEST: number;
}>;
export declare const GatewayActivityFlags: Readonly<{
    INSTANCE: number;
    JOIN: number;
    SPECTATE: number;
    JOIN_REQUEST: number;
    SYNC: number;
    PLAY: number;
}>;
export declare const GatewayActivityTypes: Readonly<{
    PLAYING: number;
    STREAMING: number;
    LISTENING: number;
    WATCHING: number;
    CUSTOM_STATUS: number;
}>;
export declare const GatewayDispatchEvents: Readonly<{
    [key: string]: any;
}>;
export declare const GatewayOpCodes: Readonly<{
    DISPATCH: number;
    HEARTBEAT: number;
    IDENTIFY: number;
    PRESENCE_UPDATE: number;
    VOICE_STATE_UPDATE: number;
    VOICE_SERVER_PING: number;
    RESUME: number;
    RECONNECT: number;
    REQUEST_GUILD_MEMBERS: number;
    INVALID_SESSION: number;
    HELLO: number;
    HEARTBEAT_ACK: number;
    SYNC_GUILD: number;
    CALL_CONNECT: number;
    GUILD_SUBSCRIPTIONS: number;
    LOBBY_CONNECT: number;
    LOBBY_DISCONNECT: number;
    LOBBY_VOICE_STATES_UPDATE: number;
    STREAM_CREATE: number;
    STREAM_DELETE: number;
    STREAM_WATCH: number;
    STREAM_PING: number;
    STREAM_SET_PAUSED: number;
    FLUSH_LFG_SUBSCRIPTIONS: number;
}>;
export declare const GatewayPresenceStatuses: Readonly<{
    ONLINE: string;
    DND: string;
    IDLE: string;
    INVISIBLE: string;
    OFFLINE: string;
}>;
export declare const MaxNumbers: Readonly<{
    UINT8: number;
    UINT16: number;
    UINT32: number;
}>;
export declare const MediaCodecTypes: Readonly<{
    AUDIO: string;
    VIDEO: string;
}>;
export declare const MediaCodecs: Readonly<{
    OPUS: string;
    H264: string;
    VP8: string;
    VP9: string;
    RTX: string;
}>;
export declare const MEDIA_CODECS_AUDIO: string[];
export declare const MEDIA_CODECS_VIDEO: string[];
export declare const MediaEncryptionModes: Readonly<{
    XSALSA20_POLY1305_LITE: string;
    XSALSA20_POLY1305_SUFFIX: string;
    XSALSA20_POLY1305: string;
}>;
export declare const MEDIA_ENCRYPTION_MODES: string[];
export declare const MediaOpCodes: Readonly<{
    IDENTIFY: number;
    SELECT_PROTOCOL: number;
    READY: number;
    HEARTBEAT: number;
    SELECT_PROTOCOL_ACK: number;
    SPEAKING: number;
    HEARTBEAT_ACK: number;
    RESUME: number;
    HELLO: number;
    RESUMED: number;
    SIGNAL: number;
    CLIENT_CONNECT: number;
    CLIENT_DISCONNECT: number;
    SESSION_UPDATE: number;
}>;
export declare const MediaProtocols: Readonly<{
    UDP: string;
    WEBRTC: string;
}>;
export declare const MEDIA_PROTOCOLS: string[];
export declare const MediaReceivedVideoQuality: Readonly<{
    OFF: string;
    FULL: string;
}>;
export declare const MediaSilencePacket: number[];
export declare const MediaSpeakingFlags: Readonly<{
    NONE: number;
    VOICE: number;
    SOUNDSHARE: number;
    PRIORITY: number;
}>;
export declare const MediaSSRCTypes: Readonly<{
    AUDIO: string;
    VIDEO: string;
}>;
export declare const SocketEvents: Readonly<{
    CLOSE: string;
    KILLED: string;
    LOG: string;
    OPEN: string;
    PACKET: string;
    READY: string;
    RECONNECTING: string;
    SOCKET: string;
    STATE: string;
    TRANSPORT: string;
    TRANSPORT_READY: string;
    WARN: string;
}>;
export declare const SocketEventsBase: Readonly<{
    CLOSE: string;
    ERROR: string;
    MESSAGE: string;
    OPEN: string;
    PING: string;
    PONG: string;
    UNEXPECTED_RESPONSE: string;
    UPGRADE: string;
}>;
export declare const SocketCloseCodes: Readonly<{
    NORMAL: number;
    GOING_AWAY: number;
    PROTOCOL_ERROR: number;
    UNSUPPORTED_DATA: number;
    ABNORMAL_CLOSURE: number;
    INVALID_FRAME: number;
    POLICY_VIOLATION: number;
    MESSAGE_TOO_BIG: number;
    MISSING_EXTENSION: number;
    INTERNAL_ERROR: number;
    SERVICE_RESTART: number;
    TRY_AGAIN_LATER: number;
    BAD_GATEWAY: number;
}>;
export declare const SocketInternalCloseCodes: Readonly<{
    INVALID_DATA: number;
    RECONNECTING: number;
    HEARTBEAT_ACK: number;
    HEARTBEAT_ACK_NONCE: number;
    OTHER_SOCKET_MESSAGE: number;
    OTHER_SOCKET_OPEN: number;
}>;
export declare const SocketInternalCloseReasons: {
    [key: number]: string | undefined;
};
export declare const SocketGatewayCloseCodes: Readonly<{
    UNKNOWN_ERROR: number;
    UNKNOWN_OPCODE: number;
    DECODE_ERROR: number;
    NOT_AUTHENTICATED: number;
    AUTHENTICATION_FAILED: number;
    ALREADY_AUTHENTICATED: number;
    INVALID_SEQUENCE: number;
    RATE_LIMITED: number;
    SESSION_TIMEOUT: number;
    INVALID_SHARD: number;
    SHARDING_REQUIRED: number;
}>;
export declare const SocketMediaCloseCodes: Readonly<{
    UNKNOWN_ERROR: number;
    UNKNOWN_OPCODE: number;
    DECODE_ERROR: number;
    NOT_AUTHENTICATED: number;
    AUTHENTICATION_FAILED: number;
    ALREADY_AUTHENTICATED: number;
    SESSION_NO_LONGER_VALID: number;
    SESSION_TIMEOUT: number;
    SERVER_NOT_FOUND: number;
    UNKNOWN_PROTOCOL: number;
    DISCONNECTED: number;
    VOICE_SERVER_CRASHED: number;
    UNKNOWN_ENCRYPTION_MODE: number;
}>;
export declare const SocketStates: Readonly<{
    [key: string]: any;
}>;
export declare const SOCKET_STATES: readonly any[];
export declare const RTP_HEADER_VERSION = 128;
export declare const RTPPayloadTypes: Readonly<{
    OPUS: number;
    VP8: number;
    VP9: number;
    H264: number;
}>;
export declare const RTP_PAYLOAD_TYPES: number[];
export declare const RTCP_HEADER_VERSION = 128;
export declare const RTCPPacketTypes: Readonly<{
    SENDER_REPORT: number;
    RECEIVER_REPORT: number;
    SOURCE_DESCRIPTION: number;
    BYE: number;
    APP: number;
    RTPFB: number;
    PSFB: number;
}>;
export declare const RTCP_PACKET_TYPES: number[];
export declare const RTPHeaderExtensionOneByte: Readonly<{
    HEADER: number[];
    LOCAL_IDENTIFER: number;
}>;
export declare const RTPHeaderExtensionTwoByte: Readonly<{
    HEADER: number[];
}>;
export declare const ZLIB_SUFFIX: number[];
