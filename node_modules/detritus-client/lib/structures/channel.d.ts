import { RequestTypes } from 'detritus-client-rest';
import { ShardClient, VoiceConnectOptions } from '../client';
import { BaseCollection } from '../collections/basecollection';
import { BaseSet } from '../collections/baseset';
import { VoiceConnection } from '../media/voiceconnection';
import { PermissionTools, UrlQuery } from '../utils';
import { BaseStructure, BaseStructureData } from './basestructure';
import { Guild } from './guild';
import { Member } from './member';
import { Message } from './message';
import { Overwrite } from './overwrite';
import { Role } from './role';
import { Typing } from './typing';
import { User } from './user';
import { VoiceState } from './voicestate';
export declare type Channel = (ChannelBase | ChannelDM | ChannelGuildVoice | ChannelDMGroup | ChannelGuildBase | ChannelGuildCategory | ChannelGuildText | ChannelGuildStore);
export declare function createChannelFromData(client: ShardClient, data: any): Channel;
/**
 * Basic Channel Structure
 * @category Structure
 */
export declare class ChannelBase extends BaseStructure {
    readonly _keys: BaseSet<string>;
    readonly _keysMerge: BaseSet<string>;
    _nicks?: BaseCollection<string, string>;
    _permissionOverwrites?: BaseCollection<string, Overwrite>;
    _recipients?: BaseCollection<string, User>;
    applicationId?: string;
    bitrate: number;
    deleted: boolean;
    guildId: string;
    id: string;
    icon?: null | string;
    isPartial: boolean;
    lastMessageId?: null | string;
    lastPinTimestampUnix: number;
    name: string;
    nsfw: boolean;
    parentId?: null | string;
    position: number;
    rateLimitPerUser: number;
    topic?: string;
    type: number;
    userLimit: number;
    constructor(client: ShardClient, data: BaseStructureData, merge?: boolean);
    readonly canAddReactions: boolean;
    readonly canAttachFiles: boolean;
    readonly canDeafenMembers: boolean;
    readonly canEdit: boolean;
    readonly canEmbedLinks: boolean;
    readonly canJoin: boolean;
    readonly canManageMessages: boolean;
    readonly canManageWebhooks: boolean;
    readonly canMentionEveryone: boolean;
    readonly canMessage: boolean;
    readonly canMoveMembers: boolean;
    readonly canMuteMembers: boolean;
    readonly canPrioritySpeaker: boolean;
    readonly canSendTTSMessage: boolean;
    readonly canSpeak: boolean;
    readonly canStream: boolean;
    readonly canReadHistory: boolean;
    readonly canUseExternalEmojis: boolean;
    readonly canUseVAD: boolean;
    readonly canView: boolean;
    readonly children: BaseCollection<string, ChannelGuildBase>;
    readonly createdAt: Date;
    readonly createdAtUnix: number;
    readonly defaultIconUrl: null | string;
    readonly guild: Guild | null;
    readonly iconUrl: null | string;
    readonly isDm: boolean;
    readonly isDmGroup: boolean;
    readonly isDmSingle: boolean;
    readonly isGuildCategory: boolean;
    readonly isGuildChannel: boolean;
    readonly isGuildLfgListings: boolean;
    readonly isGuildNews: boolean;
    readonly isGuildStore: boolean;
    readonly isGuildText: boolean;
    readonly isGuildVoice: boolean;
    readonly isManaged: boolean;
    readonly isSyncedWithParent: boolean;
    readonly isText: boolean;
    readonly isVoice: boolean;
    readonly joined: boolean;
    readonly jumpLink: string;
    readonly lastPinTimestamp: Date | null;
    readonly members: BaseCollection<string, Member>;
    readonly messages: BaseCollection<string, Message>;
    readonly mention: string;
    readonly nicks: BaseCollection<string, string>;
    readonly owner: User | null;
    readonly parent: ChannelGuildCategory | null;
    readonly permissionOverwrites: BaseCollection<string, Overwrite>;
    readonly recipients: BaseCollection<string, User>;
    readonly typing: BaseCollection<string, Typing>;
    readonly voiceStates: BaseCollection<string, VoiceState>;
    can(permissions: PermissionTools.PermissionChecks, memberOrRole?: Member | Role): boolean;
    iconUrlFormat(format?: null | string, query?: UrlQuery): null | string;
    isSyncedWith(parent: ChannelGuildCategory | null): boolean;
    addPinnedMessage(messageId: string): Promise<any>;
    addRecipient(userId: string): Promise<any>;
    bulkDelete(messageIds: Array<string>): Promise<any>;
    close(): Promise<any>;
    createInvite(options: RequestTypes.CreateChannelInvite): Promise<import("./invite").Invite>;
    createMessage(options?: RequestTypes.CreateMessage | string): Promise<any>;
    createReaction(messageId: string, emoji: string): Promise<any>;
    createWebhook(options: RequestTypes.CreateWebhook): Promise<any>;
    delete(options?: RequestTypes.DeleteChannel): Promise<ChannelBase | ChannelDM | ChannelGuildVoice | ChannelDMGroup | ChannelGuildBase | ChannelGuildCategory | ChannelGuildText | ChannelGuildStore>;
    deleteMessage(messageId: string, options?: RequestTypes.DeleteMessage): Promise<any>;
    deleteOverwrite(overwriteId: string, options?: RequestTypes.DeleteChannelOverwrite): Promise<any>;
    deletePin(messageId: string): Promise<any>;
    deleteReaction(messageId: string, emoji: string, userId?: string): Promise<any>;
    deleteReactions(messageId: string): Promise<any>;
    edit(options?: RequestTypes.EditChannel): Promise<any>;
    editMessage(messageId: string, options?: RequestTypes.EditMessage): Promise<any>;
    editOverwrite(overwriteId: string, options?: RequestTypes.EditChannelOverwrite): Promise<any>;
    fetchCallStatus(): Promise<any>;
    fetchInvites(): Promise<BaseCollection<string, import("./invite").Invite>>;
    fetchMessage(messageId: string): Promise<any>;
    fetchMessages(options?: RequestTypes.FetchMessages): Promise<any>;
    fetchPins(): Promise<any>;
    fetchReactions(messageId: string, emoji: string, options?: RequestTypes.FetchReactions): Promise<any>;
    fetchStoreListing(): Promise<any>;
    fetchWebhooks(): Promise<any>;
    grantEntitlement(): Promise<any>;
    join(...args: any[]): Promise<any>;
    publish(options: RequestTypes.CreateApplicationNews): Promise<any>;
    removeRecipient(userId: string): Promise<any>;
    search(options: RequestTypes.SearchOptions, retry?: boolean): Promise<any>;
    startCallRinging(recipients?: Array<string>): Promise<any>;
    stopCallRinging(recipients?: Array<string>): Promise<any>;
    triggerTyping(): Promise<any>;
    turnIntoNewsChannel(): Promise<any>;
    turnIntoTextChannel(): Promise<any>;
    unack(): Promise<any>;
    toString(): string;
}
export interface CallOptions extends VoiceConnectOptions {
    recipients?: Array<string>;
    verify?: boolean;
}
/**
 * Single DM Channel
 * @category Structure
 */
export declare class ChannelDM extends ChannelBase {
    readonly _keys: BaseSet<string>;
    _name: string;
    lastMessageId?: null | string;
    constructor(client: ShardClient, data: BaseStructureData, merge?: boolean);
    readonly iconUrl: null | string;
    readonly joined: boolean;
    readonly messages: BaseCollection<string, Message>;
    readonly name: string;
    iconUrlFormat(format?: null | string, query?: UrlQuery): null | string;
    addPinnedMessage(messageId: string): Promise<any>;
    bulkDelete(messageIds: Array<string>): Promise<any>;
    close(): Promise<ChannelBase | ChannelDM | ChannelGuildVoice | ChannelDMGroup | ChannelGuildBase | ChannelGuildCategory | ChannelGuildText | ChannelGuildStore>;
    createMessage(options?: RequestTypes.CreateMessage | string): Promise<Message>;
    createReaction(messageId: string, emoji: string): Promise<any>;
    deleteMessage(messageId: string, options?: RequestTypes.DeleteMessage): Promise<any>;
    deletePin(messageId: string): Promise<any>;
    deleteReaction(messageId: string, emoji: string, userId?: string): Promise<any>;
    deleteReactions(messageId: string): Promise<any>;
    editMessage(messageId: string, options?: RequestTypes.EditMessage): Promise<Message>;
    fetchCallStatus(): Promise<any>;
    fetchMessage(messageId: string): Promise<Message>;
    fetchMessages(options: RequestTypes.FetchMessages): Promise<BaseCollection<string, Message>>;
    fetchPins(): Promise<BaseCollection<string, Message>>;
    fetchReactions(messageId: string, emoji: string, options?: RequestTypes.FetchReactions): Promise<BaseCollection<string, User>>;
    join(options: CallOptions): Promise<{
        connection: VoiceConnection;
        isNew: boolean;
    } | null>;
    search(options: RequestTypes.SearchOptions, retry?: boolean): Promise<any>;
    startCallRinging(recipients?: Array<string>): Promise<any>;
    stopCallRinging(recipients?: Array<string>): Promise<any>;
    triggerTyping(): Promise<any>;
    unack(): Promise<any>;
    mergeValue(key: string, value: any): void;
}
/**
 * Group DM Channel
 * @category Structure
 */
export declare class ChannelDMGroup extends ChannelDM {
    readonly _keys: BaseSet<string>;
    applicationId?: string;
    icon: null | string;
    ownerId: string;
    constructor(client: ShardClient, data: BaseStructureData);
    readonly defaultIconUrl: string;
    readonly owner: User | null;
    iconUrlFormat(format?: null | string, query?: UrlQuery): string;
    isOwner(userId: string): boolean;
    addRecipient(userId: string): Promise<any>;
    removeRecipient(userId: string): Promise<any>;
}
/**
 * Basic Guild Channel
 * @category Structure
 */
export declare class ChannelGuildBase extends ChannelBase {
    readonly _keys: BaseSet<string>;
    readonly _keysMerge: BaseSet<string>;
    guildId: string;
    nsfw: boolean;
    parentId?: null | string;
    position: number;
    rateLimitPerUser: number;
    constructor(client: ShardClient, data: BaseStructureData, merge?: boolean);
    readonly canAddReactions: boolean;
    readonly canAttachFiles: boolean;
    readonly canDeafenMembers: boolean;
    readonly canEdit: boolean;
    readonly canEmbedLinks: boolean;
    readonly canJoin: boolean;
    readonly canManageMessages: boolean;
    readonly canManageWebhooks: boolean;
    readonly canMentionEveryone: boolean;
    readonly canMessage: boolean;
    readonly canMoveMembers: boolean;
    readonly canMuteMembers: boolean;
    readonly canPrioritySpeaker: boolean;
    readonly canSendTTSMessage: boolean;
    readonly canSpeak: boolean;
    readonly canStream: boolean;
    readonly canReadHistory: boolean;
    readonly canUseExternalEmojis: boolean;
    readonly canUseVAD: boolean;
    readonly canView: boolean;
    readonly guild: Guild | null;
    readonly jumpLink: string;
    readonly parent: ChannelGuildCategory | null;
    can(permissions: PermissionTools.PermissionChecks, memberOrRole?: Member | Role, { ignoreAdministrator, ignoreOwner }?: {
        ignoreAdministrator?: boolean;
        ignoreOwner?: boolean;
    }): boolean;
    isSyncedWith(parent: ChannelGuildCategory | null): boolean;
    deleteOverwrite(overwriteId: string, options?: RequestTypes.DeleteChannelOverwrite): Promise<any>;
    editOverwrite(overwriteId: string, options?: RequestTypes.EditChannelOverwrite): Promise<any>;
    mergeValue(key: string, value: any): void;
}
/**
 * Guild Category Channel
 * @category Structure
 */
export declare class ChannelGuildCategory extends ChannelGuildBase {
    readonly _keys: BaseSet<string>;
    bitrate: number;
    userLimit: number;
    constructor(client: ShardClient, data: BaseStructureData);
    readonly children: BaseCollection<string, Channel>;
}
/**
 * Guild Text Channel, it can also be a news channel.
 * Not sure about the upcoming LFG group, it might not extend this
 * @category Structure
 */
export declare class ChannelGuildText extends ChannelGuildBase {
    readonly _keys: BaseSet<string>;
    lastMessageId?: null | string;
    topic?: string;
    constructor(client: ShardClient, data: BaseStructureData);
    readonly members: BaseCollection<string, Member>;
    readonly messages: BaseCollection<string, Message>;
    addPinnedMessage(messageId: string): Promise<any>;
    bulkDelete(messageIds: Array<string>): Promise<any>;
    createMessage(options?: RequestTypes.CreateMessage | string): Promise<Message>;
    createReaction(messageId: string, emoji: string): Promise<any>;
    createWebhook(options: RequestTypes.CreateWebhook): Promise<import("./webhook").Webhook>;
    deleteMessage(messageId: string, options?: RequestTypes.DeleteMessage): Promise<any>;
    deletePin(messageId: string): Promise<any>;
    deleteReaction(messageId: string, emoji: string, userId?: string): Promise<any>;
    deleteReactions(messageId: string): Promise<any>;
    editMessage(messageId: string, options?: RequestTypes.EditMessage): Promise<Message>;
    fetchMessage(messageId: string): Promise<Message>;
    fetchMessages(options: RequestTypes.FetchMessages): Promise<BaseCollection<string, Message>>;
    fetchPins(): Promise<BaseCollection<string, Message>>;
    fetchReactions(messageId: string, emoji: string, options?: RequestTypes.FetchReactions): Promise<BaseCollection<string, User>>;
    fetchWebhooks(): Promise<BaseCollection<string, import("./webhook").Webhook>>;
    publish(options: RequestTypes.CreateApplicationNews): Promise<import("./applicationnews").ApplicationNews>;
    search(options: RequestTypes.SearchOptions, retry?: boolean): Promise<any>;
    triggerTyping(): Promise<any>;
    turnIntoNewsChannel(): Promise<any>;
    turnIntoTextChannel(): Promise<any>;
    unack(): Promise<any>;
    mergeValue(key: string, value: any): void;
}
/**
 * Guild Voice Channel
 * @category Structure
 */
export declare class ChannelGuildVoice extends ChannelGuildBase {
    readonly _keys: BaseSet<string>;
    bitrate: number;
    userLimit: number;
    constructor(client: ShardClient, data: BaseStructureData);
    readonly joined: boolean;
    readonly members: BaseCollection<string, Member>;
    readonly voiceStates: BaseCollection<string, VoiceState>;
    join(options: VoiceConnectOptions): Promise<{
        connection: VoiceConnection;
        isNew: boolean;
    } | null>;
}
/**
 * Guild Store Channel
 * @category Structure
 */
export declare class ChannelGuildStore extends ChannelGuildBase {
    fetchStoreListing(): Promise<import("./store").StoreListing>;
    grantEntitlement(): Promise<any>;
}
