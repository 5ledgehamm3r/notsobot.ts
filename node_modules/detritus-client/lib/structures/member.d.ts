import { RequestTypes } from 'detritus-client-rest';
import { ShardClient } from '../client';
import { BaseCollection } from '../collections/basecollection';
import { BaseSet } from '../collections/baseset';
import { PermissionTools } from '../utils';
import { BaseStructureData } from './basestructure';
import { ChannelGuildBase, ChannelGuildVoice } from './channel';
import { Guild } from './guild';
import { Role } from './role';
import { User, UserMixin } from './user';
import { VoiceState } from './voicestate';
/**
 * Guild Member Structure
 * @category Structure
 */
export declare class Member extends UserMixin {
    readonly _keys: BaseSet<string>;
    readonly _keysMerge: BaseSet<string>;
    _roles?: BaseCollection<string, null | Role>;
    deaf: boolean;
    guildId: string;
    hoistedRoleId: null | string;
    joinedAtUnix: number;
    left: boolean;
    mute: boolean;
    nick: null | string;
    premiumSinceUnix: number;
    user: User;
    constructor(client: ShardClient, data: BaseStructureData);
    readonly canAdministrator: boolean;
    readonly canBanMembers: boolean;
    readonly canChangeNickname: boolean;
    readonly canChangeNicknames: boolean;
    readonly canCreateInstantInvite: boolean;
    readonly canKickMembers: boolean;
    readonly canManageChannels: boolean;
    readonly canManageEmojis: boolean;
    readonly canManageGuild: boolean;
    readonly canManageMessages: boolean;
    readonly canManageRoles: boolean;
    readonly canManageWebhooks: boolean;
    readonly canViewAuditLogs: boolean;
    readonly color: number;
    readonly colorRole: null | Role;
    readonly guild: Guild | null;
    readonly highestRole: null | Role;
    readonly hoistedRole: null | Role;
    readonly isBoosting: boolean;
    readonly isOffline: boolean;
    readonly isOwner: boolean;
    readonly isPartial: boolean;
    readonly joinedAt: Date | null;
    readonly mention: string;
    readonly name: string;
    readonly names: Array<string>;
    readonly permissions: number;
    readonly premiumSince: Date | null;
    readonly roles: BaseCollection<string, null | Role>;
    readonly voiceChannel: ChannelGuildVoice | null;
    readonly voiceState: null | VoiceState;
    can(permissions: PermissionTools.PermissionChecks, options?: {
        ignoreAdministrator?: boolean;
        ignoreOwner?: boolean;
    }): boolean;
    canEdit(member: Member): boolean;
    permissionsIn(channelId: ChannelGuildBase | string): number;
    addRole(roleId: string, options?: RequestTypes.AddGuildMemberRole): Promise<any>;
    ban(options?: RequestTypes.CreateGuildBan): Promise<any>;
    edit(options?: RequestTypes.EditGuildMember): Promise<any>;
    editNick(nick: string, options?: RequestTypes.EditGuildNick): Promise<any>;
    move(channelId: null | string, options?: RequestTypes.EditGuildMember): Promise<any>;
    remove(options?: RequestTypes.RemoveGuildMember): Promise<any>;
    removeBan(options?: RequestTypes.RemoveGuildBan): Promise<any>;
    removeRole(roleId: string, options?: RequestTypes.RemoveGuildMemberRole): Promise<any>;
    setDeaf(deaf: boolean, options?: RequestTypes.EditGuildMember): Promise<any>;
    setMute(mute: boolean, options?: RequestTypes.EditGuildMember): Promise<any>;
    difference(key: string, value: any): [boolean, any];
    mergeValue(key: string, value: any): void;
    toJSON(): any;
}
