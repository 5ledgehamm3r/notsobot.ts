import { RequestTypes } from 'detritus-client-rest';
import { ShardClient } from '../client';
import { BaseCollection } from '../collections/basecollection';
import { BaseSet } from '../collections/baseset';
import { BaseStructure, BaseStructureData } from './basestructure';
import { Application } from './application';
import { Attachment } from './attachment';
import { Channel } from './channel';
import { Guild } from './guild';
import { Member } from './member';
import { MessageEmbed } from './messageembed';
import { Reaction } from './reaction';
import { Role } from './role';
import { User } from './user';
/**
 * Channel Message Structure
 * @category Structure
 */
export declare class Message extends BaseStructure {
    readonly _keys: BaseSet<string>;
    readonly _keysMerge: BaseSet<string>;
    readonly _keysSkipDifference: BaseSet<string>;
    _content: string;
    _attachments?: BaseCollection<string, Attachment>;
    _embeds?: BaseCollection<number, MessageEmbed>;
    _mentions?: BaseCollection<string, Member | User>;
    _mentionChannels?: BaseCollection<string, Channel>;
    _mentionRoles?: BaseCollection<string, null | Role>;
    _reactions?: BaseCollection<string, Reaction>;
    activity?: MessageActivity;
    application?: Application;
    author: User;
    call?: MessageCall;
    channelId: string;
    content: string;
    deleted: boolean;
    editedTimestampUnix: number;
    flags: number;
    guildId?: string;
    id: string;
    member?: Member;
    mentionEveryone: boolean;
    messageReference?: MessageReference;
    nonce?: string;
    pinned: boolean;
    timestampUnix: number;
    tts: boolean;
    type: number;
    webhookId?: string;
    constructor(client: ShardClient, data: BaseStructureData);
    readonly attachments: BaseCollection<string, Attachment>;
    readonly canDelete: boolean;
    readonly canManage: boolean;
    readonly canReact: boolean;
    readonly canReply: boolean;
    readonly channel: Channel | null;
    readonly createdAt: Date;
    readonly createdAtUnix: number;
    readonly editedAt: Date | null;
    readonly editedAtUnix: null | number;
    readonly editedTimestamp: Date | null;
    readonly embeds: BaseCollection<number, MessageEmbed>;
    readonly fromBot: boolean;
    readonly fromMe: boolean;
    readonly fromSystem: boolean;
    readonly fromUser: boolean;
    readonly fromWebhook: boolean;
    readonly guild: Guild | null;
    readonly hasFlagCrossposted: boolean;
    readonly hasFlagIsCrossposted: boolean;
    readonly hasFlagSuppressEmbeds: boolean;
    readonly inDm: boolean;
    readonly isEdited: boolean;
    readonly jumpLink: string;
    readonly mentions: BaseCollection<string, Member | User>;
    readonly mentionChannels: BaseCollection<string, Channel>;
    readonly mentionRoles: BaseCollection<string, null | Role>;
    readonly reactions: BaseCollection<string, Reaction>;
    readonly systemContent: string;
    readonly timestamp: Date;
    convertContent(options?: {
        escapeMentions?: boolean;
        guildSpecific?: boolean;
        nick?: boolean;
        text?: string;
    }): string;
    hasFlag(flag: number): boolean;
    ack(token: string): Promise<any>;
    delete(options?: RequestTypes.DeleteMessage): Promise<any>;
    deleteReaction(emoji: string, userId?: string): Promise<any>;
    deleteReactions(): Promise<any>;
    edit(options?: RequestTypes.EditMessage | string): Promise<Message>;
    fetchReactions(emoji: string, options?: RequestTypes.FetchReactions): Promise<BaseCollection<string, User>>;
    pin(): Promise<any>;
    publish(options: RequestTypes.CreateApplicationNews): Promise<import("./applicationnews").ApplicationNews>;
    react(emoji: string): Promise<any>;
    removeMention(): Promise<any>;
    reply(options?: RequestTypes.CreateMessage | string): Promise<Message>;
    suppressEmbeds(suppress?: boolean): Promise<any>;
    triggerTyping(): Promise<any>;
    unpin(): Promise<any>;
    mergeValue(key: string, value: any): void;
    toString(): string;
}
/**
 * Channel Message Activity Structure, used for inviting people to listen/join
 * @category Structure
 */
export declare class MessageActivity extends BaseStructure {
    readonly _keys: BaseSet<string>;
    readonly message: Message;
    coverImage: null | string;
    name: null | string;
    partyId: string;
    type: number;
    constructor(message: Message, data: BaseStructureData);
    readonly group: BaseCollection<string, User>;
}
/**
 * Channel Message Call Structure, used to define the call properties in the DM it's from
 * Used to format the content
 * @category Structure
 */
export declare class MessageCall extends BaseStructure {
    readonly _keys: BaseSet<string>;
    readonly message: Message;
    endedTimestamp: Date | null;
    participants: Array<string>;
    constructor(message: Message, data: BaseStructureData);
    readonly isEnded: boolean;
    mergeValue(key: string, value: any): void;
}
/**
 * Channel Message Reference Structure, used to tell the client that this is from a server webhook
 * Used for crossposts
 * @category Structure
 */
export declare class MessageReference extends BaseStructure {
    readonly _keys: BaseSet<string>;
    readonly message: Message;
    channelId: string;
    guildId: string;
    messageId?: string;
    constructor(message: Message, data: BaseStructureData);
    readonly channel: null | Channel;
    readonly guild: null | Guild;
}
export declare function messageSystemContent(message: Message, content?: string): string;
