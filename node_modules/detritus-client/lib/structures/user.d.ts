import { RequestTypes } from 'detritus-client-rest';
import { ShardClient } from '../client';
import { BaseCollection } from '../collections/basecollection';
import { BaseSet } from '../collections/baseset';
import { UrlQuery } from '../utils';
import { BaseStructure, BaseStructureData } from './basestructure';
import { Channel } from './channel';
import { Guild } from './guild';
import { Message } from './message';
import { Presence } from './presence';
/**
 * Basic User Structure
 * @category Structure
 */
export declare class User extends BaseStructure {
    readonly _keys: BaseSet<string>;
    avatar: string | null;
    bot: boolean;
    discriminator: string;
    id: string;
    username: string;
    constructor(client: ShardClient, data: BaseStructureData, merge?: boolean);
    readonly avatarUrl: string;
    readonly createdAt: Date;
    readonly createdAtUnix: number;
    readonly defaultAvatarUrl: string;
    readonly dm: Channel | null;
    readonly guilds: BaseCollection<string, Guild>;
    readonly isClientOwner: boolean;
    readonly isMe: boolean;
    readonly isPartial: boolean;
    readonly isWebhook: boolean;
    readonly jumpLink: string;
    readonly mention: string;
    readonly messages: BaseCollection<string, Message>;
    readonly name: string;
    readonly names: Array<string>;
    readonly note: string;
    readonly presence: null | Presence;
    avatarUrlFormat(format?: null | string, query?: UrlQuery): string;
    add(): Promise<any>;
    block(): Promise<any>;
    createDm(): Promise<import("./channel").ChannelDM>;
    createOrGetDm(): Promise<import("./channel").ChannelBase>;
    createMessage(options?: RequestTypes.CreateMessage | string): Promise<any>;
    deleteRelationship(): Promise<any>;
    editNote(note: string): Promise<any>;
    editRelationship(type: number): Promise<any>;
    fetchProfile(): Promise<import("./profile").Profile>;
    unadd(): Promise<any>;
    unblock(): Promise<any>;
    toString(): string;
}
/**
 * User with Token Structure
 * e.g. when you edit your user
 * @category Structure
 */
export declare class UserWithToken extends User {
    readonly _keys: BaseSet<string>;
    token: string;
    constructor(client: ShardClient, data: BaseStructureData);
}
/**
 * User with Flags Structure
 * used to describe someone's badges, you get them from me/profile/team owner
 * @category Structure
 */
export declare class UserWithFlags extends User {
    readonly _keys: BaseSet<string>;
    flags: number;
    constructor(client: ShardClient, data: BaseStructureData, merge?: boolean);
    readonly hasStaff: boolean;
    readonly hasPartner: boolean;
    readonly hasHypesquad: boolean;
    readonly hasBugHunter: boolean;
    readonly hasMfaSms: boolean;
    readonly hasPremiumPromoDismissed: boolean;
    readonly hasHypesquadHouseBravery: boolean;
    readonly hasHypesquadHouseBrilliance: boolean;
    readonly hasHypesquadHouseBalance: boolean;
    readonly hasEarlySupporter: boolean;
    readonly hasTeamUser: boolean;
    hasFlag(flag: number): boolean;
}
/**
 * User Extended Structure
 * received from /users/@me calls with an oauth2 token with correct permissions
 * @category Structure
 */
export declare class UserExtended extends UserWithFlags {
    readonly _keys: BaseSet<string>;
    email?: string | null;
    flags: number;
    locale?: string | null;
    mfaEnabled: boolean;
    premiumType: number;
    verified: boolean;
    constructor(client: ShardClient, data: BaseStructureData, merge?: boolean);
    readonly isClaimed: boolean;
    readonly hasNitroClassic: boolean;
    readonly hasNitro: boolean;
    hasPremiumType(type: number): boolean;
}
/**
 * User Me Structure
 * the current user, it has all their details
 * @category Structure
 */
export declare class UserMe extends UserExtended {
    readonly _keys: BaseSet<string>;
    phone?: string;
    constructor(client: ShardClient, data: BaseStructureData);
}
/**
 * User Mixin Structure
 * Used to extend to receive all of [User]'s properties
 * @category Structure
 */
export declare class UserMixin extends BaseStructure {
    user: User;
    readonly avatar: null | string;
    readonly avatarUrl: string;
    readonly bot: boolean;
    readonly createdAt: Date;
    readonly createdAtUnix: number;
    readonly defaultAvatarUrl: string;
    readonly discriminator: string;
    readonly dm: Channel | null;
    readonly guilds: BaseCollection<string, Guild>;
    readonly id: string;
    readonly isClientOwner: boolean;
    readonly isMe: boolean;
    readonly isWebhook: boolean;
    readonly jumpLink: string;
    readonly mention: string;
    readonly messages: BaseCollection<string, Message>;
    readonly name: string;
    readonly names: Array<string>;
    readonly note: string;
    readonly presence: null | Presence;
    readonly username: string;
    avatarUrlFormat(format?: null | string, query?: UrlQuery): string;
    add(): Promise<any>;
    block(): Promise<any>;
    createDm(): Promise<import("./channel").ChannelDM>;
    createOrGetDm(): Promise<import("./channel").ChannelBase>;
    createMessage(options?: RequestTypes.CreateMessage | string): Promise<any>;
    deleteRelationship(): Promise<any>;
    editNote(note: string): Promise<any>;
    editRelationship(type: number): Promise<any>;
    fetchProfile(): Promise<import("./profile").Profile>;
    unadd(): Promise<any>;
    unblock(): Promise<any>;
    toString(): string;
}
