import { ShardClient } from '../client';
import { BaseCollection } from '../collections/basecollection';
import { BaseSet } from '../collections/baseset';
import { UrlQuery } from '../utils';
import { BaseStructure, BaseStructureData } from './basestructure';
import { Application } from './application';
import { User } from './user';
export declare const SpecialApplications: Readonly<{
    XBOX: string;
}>;
export declare const SpecialPrefixes: Readonly<{
    SPOTIFY: string;
}>;
export declare const ImageSizes: Readonly<{
    SMALL: number;
    LARGE: number;
}>;
/**
 * Presence Structure, used to detail a user's presence in a guild (or general if you have them added (non-bots only))
 * @category Structure
 */
export declare class Presence extends BaseStructure {
    readonly _keys: BaseSet<string>;
    readonly _keysMerge: BaseSet<string>;
    readonly _keysSkipDifference: BaseSet<string>;
    _activities?: BaseCollection<string, PresenceActivity>;
    clientStatus?: PresenceClientStatus;
    guildIds: BaseSet<string>;
    lastGuildId: string;
    lastModified?: number;
    status: string;
    user: User;
    constructor(client: ShardClient, data: BaseStructureData);
    readonly activity: null | PresenceActivity;
    readonly activities: BaseCollection<string, PresenceActivity>;
    readonly game: null | PresenceActivity;
    readonly isDnd: boolean;
    readonly isIdle: boolean;
    readonly isOffline: boolean;
    readonly isOnline: boolean;
    activityFor(guildId: string): null | PresenceActivity;
    activitiesFor(guildId: string): BaseCollection<string, PresenceActivity>;
    _deleteGuildId(guildId: string): void;
    mergeValue(key: string, value: any): void;
    toString(): string;
}
/**
 * Presence Activity Structure, used in [Presence]
 * @category Structure
 */
export declare class PresenceActivity extends BaseStructure {
    readonly _keys: BaseSet<string>;
    readonly _keysMerge: BaseSet<string>;
    readonly _keysSkipDifference: BaseSet<string>;
    readonly user: User;
    applicationId?: string;
    assets?: PresenceActivityAssets;
    createdAt?: number;
    details?: string;
    flags: number;
    guildIds: BaseSet<string>;
    id: string;
    instance?: boolean;
    metadata?: any;
    name: string;
    party?: PresenceActivityParty;
    platform?: string;
    position: number;
    secrets?: PresenceActivitySecrets;
    sessionId?: string;
    state?: string;
    syncId?: string;
    timestamps?: PresenceActivityTimestamps;
    type: number;
    url?: string;
    constructor(user: User, data: BaseStructureData);
    readonly application: Application | null;
    readonly group: BaseCollection<string, User> | null;
    readonly canInstance: boolean;
    readonly canJoin: boolean;
    readonly canJoinRequest: boolean;
    readonly canPlay: boolean;
    readonly canSpectate: boolean;
    readonly canSync: boolean;
    readonly imageUrl: null | string;
    readonly isCustomStatus: boolean;
    readonly isListening: boolean;
    readonly isPlaying: boolean;
    readonly isStreaming: boolean;
    readonly isWatching: boolean;
    readonly isOnSpotify: boolean;
    readonly isOnXbox: boolean;
    readonly platformDiscordUrl: null | string;
    readonly spotifyTrackUrl: null | string;
    readonly typeText: string;
    hasFlag(flag: number): boolean;
    imageUrlFormat(format?: null | string, query?: UrlQuery): null | string;
    fetchApplication(): Promise<Application | null>;
    fetchMetadata(): Promise<any>;
    mergeValue(key: string, value: any): void;
    toString(): string;
}
/**
 * Presence Activity Assets Structure, used in [PresenceActivity]
 * @category Structure
 */
export declare class PresenceActivityAssets extends BaseStructure {
    readonly _keys: BaseSet<string>;
    readonly _keysMerge: BaseSet<string>;
    readonly activity: PresenceActivity;
    largeImage?: string;
    largeText?: string;
    smallImage?: string;
    smallText?: string;
    constructor(activity: PresenceActivity, data: BaseStructureData);
    readonly imageUrl: string | null;
    readonly largeImageUrl: string | null;
    readonly smallImageUrl: string | null;
    imageUrlFormat(format?: null | string, query?: UrlQuery, hash?: null | string): null | string;
    largeImageUrlFormat(format?: null | string, query?: UrlQuery): string | null;
    smallImageUrlFormat(format?: null | string, query?: UrlQuery): string | null;
    mergeValue(key: string, value: any): void;
}
/**
 * Presence Activity Party Structure, used in [PresenceActivity]
 * describe's the user's current party (listening party, game party, etc..)
 * @category Structure
 */
export declare class PresenceActivityParty extends BaseStructure {
    readonly _keys: BaseSet<string>;
    readonly _keysMerge: BaseSet<string>;
    readonly activity: PresenceActivity;
    id?: string;
    size?: [number, number];
    constructor(activity: PresenceActivity, data: BaseStructureData);
    readonly currentSize: number | null;
    readonly group: BaseCollection<string, User>;
    readonly isFull: boolean;
    readonly isSpotify: boolean;
    readonly maxSize: number | null;
    mergeValue(key: string, value: any): void;
}
/**
 * Presence Activity Secrets Structure
 * used to join someone's game
 * @category Structure
 */
export declare class PresenceActivitySecrets extends BaseStructure {
    readonly _keys: BaseSet<string>;
    readonly _keysMerge: BaseSet<string>;
    readonly activity: PresenceActivity;
    join?: string;
    match?: string;
    spectate?: string;
    constructor(activity: PresenceActivity, data: BaseStructureData);
    mergeValue(key: string, value: any): void;
}
/**
 * Presence Activity Timestamp Structure
 * used to describe when they started doing an activity and if they ended it or not
 * @category Structure
 */
export declare class PresenceActivityTimestamps extends BaseStructure {
    readonly _keys: BaseSet<string>;
    readonly _keysMerge: BaseSet<string>;
    readonly activity: PresenceActivity;
    end?: number;
    start?: number;
    constructor(activity: PresenceActivity, data: BaseStructureData);
    readonly elapsedTime: number;
    readonly totalTime: number;
    mergeValue(key: string, value: any): void;
}
/**
 * Presence Client Status Structure, used in [Presence]
 * used to describe if a person is on desktop, mobile, web, etc..
 * @category Structure
 */
export declare class PresenceClientStatus extends BaseStructure {
    readonly _keys: BaseSet<string>;
    readonly _keysMerge: BaseSet<string>;
    readonly presence: Presence;
    desktop?: string;
    mobile?: string;
    web?: string;
    constructor(presence: Presence, data: BaseStructureData);
    readonly isOnDesktop: boolean;
    readonly isOnMobile: boolean;
    readonly isOnWeb: boolean;
    readonly isOnlineOnDesktop: boolean;
    readonly isOnlineOnMobile: boolean;
    readonly isOnlineOnWeb: boolean;
    mergeValue(key: string, value: any): void;
}
