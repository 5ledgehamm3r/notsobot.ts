import { RequestTypes } from 'detritus-client-rest';
import { ShardClient } from '../client';
import { ClusterClient } from '../clusterclient';
import { ClusterProcessChild } from '../cluster/processchild';
import { CommandClient } from '../commandclient';
import { Message, Typing } from '../structures';
import { Command } from './command';
/**
 * Command Context
 * @category Command
 */
export declare class Context {
    readonly client: ShardClient;
    readonly commandClient: CommandClient;
    readonly message: Message;
    readonly typing: Typing | null;
    command?: Command;
    prefix?: string;
    constructor(message: Message, typing: Typing | null, commandClient: CommandClient);
    readonly application: import("../structures").Oauth2Application | null;
    readonly cluster: ClusterClient | null;
    readonly gateway: import("detritus-client-socket/lib/gateway").Socket;
    readonly manager: ClusterProcessChild | null;
    readonly owners: import("detritus-utils").BaseCollection<string, import("../structures").User>;
    readonly rest: import("../rest").RestClient;
    readonly shardCount: number;
    readonly shardId: number;
    readonly response: Message | undefined;
    readonly applications: import("../collections").Applications;
    readonly channels: import("../collections").Channels;
    readonly emojis: import("../collections").Emojis;
    readonly guilds: import("../collections").Guilds;
    readonly members: import("../collections").Members;
    readonly messages: import("../collections").Messages;
    readonly notes: import("../collections").Notes;
    readonly presences: import("../collections").Presences;
    readonly relationships: import("../collections").Relationships;
    readonly roles: import("../collections").Roles;
    readonly sessions: import("../collections").Sessions;
    readonly typings: import("../collections").TypingCollection;
    readonly users: import("../collections").Users;
    readonly voiceCalls: import("../collections").VoiceCalls;
    readonly voiceConnections: import("../collections").VoiceConnections;
    readonly voiceStates: import("../collections").VoiceStates;
    readonly canDelete: boolean;
    readonly canManage: boolean;
    readonly canReact: boolean;
    readonly canReply: boolean;
    readonly channel: import("../structures").ChannelBase | import("../structures").ChannelDM | import("../structures").ChannelGuildVoice | import("../structures").ChannelDMGroup | import("../structures").ChannelGuildBase | import("../structures").ChannelGuildCategory | import("../structures").ChannelGuildText | import("../structures").ChannelGuildStore | null;
    readonly channelId: string;
    readonly content: string;
    readonly fromBot: boolean;
    readonly fromSystem: boolean;
    readonly fromUser: boolean;
    readonly fromWebhook: boolean;
    readonly guild: import("../structures").Guild | null;
    readonly guildId: string | undefined;
    readonly inDm: boolean;
    readonly me: import("../structures").Member | null;
    readonly member: import("../structures").Member | undefined;
    readonly messageId: string;
    readonly systemContent: string;
    readonly user: import("../structures").User;
    readonly userId: string;
    readonly voiceChannel: import("../structures").ChannelGuildVoice | null;
    readonly voiceConnection: import("../media/voiceconnection").VoiceConnection | undefined;
    readonly voiceState: import("../structures").VoiceState | null;
    editOrReply(options?: RequestTypes.EditMessage | string): Promise<Message>;
    reply(options?: RequestTypes.CreateMessage | string): Promise<Message>;
    triggerTyping(): Promise<any>;
    toJSON(): Message;
    toString(): string;
}
