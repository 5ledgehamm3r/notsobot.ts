import { CommandAttributes, CommandClient } from '../commandclient';
import { Message } from '../structures/message';
import { ArgumentOptions, Argument } from './argument';
import { ArgumentParser, ParsedArgs, ParsedErrors } from './argumentparser';
import { Context } from './context';
import { CommandRatelimit, CommandRatelimitItem, CommandRatelimitOptions } from './ratelimit';
/**
 * @category Command
 */
export declare type CommandCallbackBefore = (context: Context) => Promise<boolean> | boolean;
/**
 * @category Command
 */
export declare type CommandCallbackBeforeRun = (context: Context, args: ParsedArgs) => Promise<boolean> | boolean;
/**
 * @category Command
 */
export declare type CommandCallbackCancel = (context: Context) => Promise<any | Message> | any | Message;
/**
 * @category Command
 */
export declare type CommandCallbackCancelRun = (context: Context, args: ParsedArgs) => Promise<any | Message> | any | Message;
/**
 * @category Command
 */
export declare type CommandCallbackError = (context: Context, args: ParsedArgs, error: any) => Promise<any> | any;
/**
 * @category Command
 */
export declare type CommandCallbackSuccess = (context: Context, args: ParsedArgs) => Promise<any> | any;
/**
 * @category Command
 */
export declare type CommandCallbackRatelimit = (context: Context, ratelimits: Array<{
    item: CommandRatelimitItem;
    ratelimit: CommandRatelimit;
    remaining: number;
}>, metadata: {
    global: boolean;
    now: number;
}) => Promise<any> | any;
/**
 * @category Command
 */
export declare type CommandCallbackRun = (context: Context, args: ParsedArgs) => Promise<any | Message> | any | Message;
/**
 * @category Command
 */
export declare type CommandCallbackRunError = (context: Context, args: ParsedArgs, error: any) => Promise<any> | any;
/**
 * @category Command
 */
export declare type CommandCallbackTypeError = (context: Context, args: ParsedArgs, errors: ParsedErrors) => Promise<any | Message> | any | Message;
/**
 * Command Options
 * @category Command Options
 */
export interface CommandOptions extends ArgumentOptions {
    _file?: string;
    args?: Array<ArgumentOptions>;
    disableDm?: boolean;
    disableDmReply?: boolean;
    metadata?: {
        [key: string]: any;
    };
    name: string;
    priority?: number;
    ratelimit?: boolean | CommandRatelimitOptions | null;
    ratelimits?: Array<CommandRatelimitOptions>;
    responseOptional?: boolean;
    onBefore?: CommandCallbackBefore;
    onBeforeRun?: CommandCallbackBeforeRun;
    onCancel?: CommandCallbackCancel;
    onCancelRun?: CommandCallbackCancelRun;
    onError?: CommandCallbackError;
    run?: CommandCallbackRun;
    onRatelimit?: CommandCallbackRatelimit;
    onRunError?: CommandCallbackRunError;
    onSuccess?: CommandCallbackSuccess;
    onTypeError?: CommandCallbackTypeError;
}
/**
 * Command itself
 * @category Command
 */
export declare class Command {
    readonly _file?: string;
    readonly commandClient: CommandClient;
    arg: Argument;
    args: ArgumentParser;
    disableDm: boolean;
    disableDmReply: boolean;
    metadata: {
        [key: string]: any;
    };
    priority: number;
    ratelimits: Array<CommandRatelimit>;
    responseOptional: boolean;
    onBefore?: CommandCallbackBefore;
    onBeforeRun?: CommandCallbackBeforeRun;
    onCancel?: CommandCallbackCancel;
    onCancelRun?: CommandCallbackCancelRun;
    onError?: CommandCallbackError;
    run?: CommandCallbackRun;
    onRatelimit?: CommandCallbackRatelimit;
    onRunError?: CommandCallbackRunError;
    onSuccess?: CommandCallbackSuccess;
    onTypeError?: CommandCallbackTypeError;
    constructor(commandClient: CommandClient, options: CommandOptions);
    readonly aliases: Array<string>;
    readonly label: string;
    readonly name: string;
    readonly names: Array<string>;
    check(name: string): boolean;
    getArgs(attributes: CommandAttributes, context: Context): Promise<{
        errors: ParsedErrors;
        parsed: ParsedArgs;
    }>;
    getName(content: string): null | string;
}
