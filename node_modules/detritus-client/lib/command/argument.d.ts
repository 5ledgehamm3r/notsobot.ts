import { Context } from './context';
export declare type ArgumentConverter = (value: string, context: Context) => Promise<any> | any;
export declare type ArgumentDefault = ((context: Context) => Promise<any> | any) | any;
/**
 * Command Argument Options
 * @category Command Options
 */
export interface ArgumentOptions {
    aliases?: Array<string>;
    default?: ArgumentDefault;
    label?: string;
    name: string;
    prefix?: string;
    prefixes?: Array<string>;
    prefixSpace?: boolean;
    type?: ArgumentConverter | Boolean | Number | String | string;
}
/**
 * Command Argument
 * @category Command
 */
export declare class Argument {
    aliases: Array<string>;
    default: ArgumentDefault;
    label: string;
    name: string;
    prefixes: Set<string>;
    type: ArgumentConverter | string;
    constructor(options: ArgumentOptions);
    readonly names: Array<string>;
    check(name: string): boolean;
    getInfo(content: string): {
        index: number;
        name: string;
    };
    getName(content: string): null | string;
    parse(value: string, context: Context): Promise<any>;
}
